name: Deploy artifacts

on:
  workflow_call:
    inputs:
      deploy-channel:
        required: true
        type: string
    secrets:
      artifact-registry-uploader-json-creds:
        required: true

permissions:
  contents: read

jobs:
  set-variables:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.define-version.outputs.version }}
    steps:
    - name: Define version
      id: define-version
      run: |
        TIME=$(date -u +'%Y%m%d%H%M')
        # TODO(b/440196950): Setup condition for stable channel.
        case "${{ inputs.deploy-channel }}" in
          unstable)
            # Unstable version format : X.Y-gitYYYYMMDDHHMM-<Github SHA 8 digit>
            SEMVER=$(echo ${{ github.ref_name }} | grep -oE '[0-9]+.[0-9]+')
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
            VERSION="${SEMVER}-git${TIME}-${SHORT_SHA}"
            ;;
          nightly)
            # Nightly version format : gitYYYYMMDDHHMM-<Github SHA 8 digit>
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
            VERSION="git${TIME}-${SHORT_SHA}"
            ;;
          *)
            exit 1
            ;;
        esac
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version is $VERSION"

  deploy-cuttlefish-cvdremote-amd64-debian-package:
    needs: [set-variables]
    environment: deployment
    runs-on: ubuntu-24.04
    container:
      image: debian@sha256:9258a75a7e4323c9e5562b361effc84ee747920116d8adfc98a465a5cdc9150e # debian:bookworm-20250407 (amd64)
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Build debian package cuttlefish-cvdremote
      uses: ./.github/actions/build-cuttlefish-cvdremote-debian-package
      with:
        version: ${{ needs.set-variables.outputs.version }}
    - name: Get exact filename
      run: echo "path=$(find . -name cuttlefish-cvdremote_*.deb)" >> $GITHUB_ENV
    - name: Authentication on GCP project android-cuttlefish-artifacts
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.artifact-registry-uploader-json-creds }}'
    - name: Deploy debian package cuttlefish-cvdremote
      uses: ./.github/actions/deploy-cuttlefish-cvdremote-debian-package
      with:
        path: ${{ env.path }}

  deploy-cuttlefish-cvdremote-arm64-debian-package:
    needs: [set-variables]
    environment: deployment
    runs-on: ubuntu-24.04-arm
    container:
      image: debian@sha256:00cd074b40c4d99ff0c24540bdde0533ca3791edcdac0de36d6b9fb3260d89e2 # debian:bookworm-20250407 (arm64/v8)
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Build debian package cuttlefish-cvdremote
      uses: ./.github/actions/build-cuttlefish-cvdremote-debian-package
      with:
        version: ${{ needs.set-variables.outputs.version }}
    - name: Get exact filename
      run: echo "path=$(find . -name cuttlefish-cvdremote_*.deb)" >> $GITHUB_ENV
    - name: Authentication on GCP project android-cuttlefish-artifacts
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.artifact-registry-uploader-json-creds }}'
    - name: Deploy debian package cuttlefish-cvdremote
      uses: ./.github/actions/deploy-cuttlefish-cvdremote-debian-package
      with:
        path: ${{ env.path }}

  deploy-cuttlefish-cloud-orchestrator-amd64-docker-image:
    needs: [set-variables]
    environment: deployment
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Build docker image
      run: docker build -t cuttlefish-cloud-orchestrator .
    - name: Authentication on GCP project android-cuttlefish-artifacts
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.artifact-registry-uploader-json-creds }}'
    - name: Login to Artifact Registry
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # aka v3.5.0
      with:
        registry: us-docker.pkg.dev
        username: _json_key
        password: '${{ secrets.artifact-registry-uploader-json-creds }}'
    - name: Deploy docker image
      uses: ./.github/actions/deploy-cuttlefish-cloud-orchestrator-docker-image
      with:
        arch: amd64
        version: ${{ needs.set-variables.outputs.version }}

  deploy-cuttlefish-cloud-orchestrator-arm64-docker-image:
    needs: [set-variables]
    environment: deployment
    runs-on: ubuntu-24.04-arm
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Build docker image
      run: docker build -t cuttlefish-cloud-orchestrator .
    - name: Authentication on GCP project android-cuttlefish-artifacts
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.artifact-registry-uploader-json-creds }}'
    - name: Login to Artifact Registry
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # aka v3.5.0
      with:
        registry: us-docker.pkg.dev
        username: _json_key
        password: '${{ secrets.artifact-registry-uploader-json-creds }}'
    - name: Deploy docker image
      uses: ./.github/actions/deploy-cuttlefish-cloud-orchestrator-docker-image
      with:
        arch: arm64
        version: ${{ needs.set-variables.outputs.version }}

  deploy-cuttlefish-cloud-orchestrator-docker-manifest:
    needs: [deploy-cuttlefish-cloud-orchestrator-amd64-docker-image, deploy-cuttlefish-cloud-orchestrator-arm64-docker-image, set-variables]
    environment: deployment
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # aka v2
    - name: Authentication on GCP project android-cuttlefish-artifacts
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.artifact-registry-uploader-json-creds }}'
    - name: Login to Artifact Registry
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # aka v3.5.0
      with:
        registry: us-docker.pkg.dev
        username: _json_key
        password: '${{ secrets.artifact-registry-uploader-json-creds }}'
    - name: Deploy manifests
      run: |
        VERSION=${{ needs.set-variables.outputs.version }}
        for MANIFEST_TAG in ${VERSION} ${{ inputs.deploy-channel }}; do
          docker manifest create ${IMAGE}:${MANIFEST_TAG} \
            --amend ${IMAGE}:${VERSION}-amd64 \
            --amend ${IMAGE}:${VERSION}-arm64
          docker manifest push ${IMAGE}:${MANIFEST_TAG}
        done
